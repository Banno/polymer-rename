const expect = require('chai').expect;
const File = require('vinyl');
const extractExpressions = require('../').extract;
const InspectStream = require('./utility/inspect-stream');

describe('gulp-polymer-rename - extract phase', function() {
  describe('in buffer mode', function() {
    it('should extract expressions', function() {
      return new Promise((resolve, reject) => {

        // create the fake file
        var fakeFile = new File({
          contents: new Buffer(`<dom-module id="foo-bar">
  <template>
    <div data-foo="{{bar}}"></div>
  </template>
  <script>
    Polymer({
      is: 'foo-bar',
      bar: true
    });
  </script>
</dom-module>`),
          path: './foo-bar.html'
        });

        // Create a extractExpressions plugin stream
        var extracter = extractExpressions();

        // wait for the file to come back out
        extracter.pipe(new InspectStream(function (file) {
          resolve(file);
        }));

        extracter.on('error', err => reject(err));

        // write the fake file to it
        extracter.end(fakeFile);
      }).then(file => {
        // make sure it came out the same way it went in
        expect(file).to.exist;
        expect(file.isBuffer()).to.be.true;
        expect(file.contents.toString('utf8')).to.be.equal(`// This file was autogenerated by polymer-rename. Do not edit.

{
  /** @this {FooBarElement} @suppress {visibility} */ let renameFn = function() {
  polymerRename.identifier(60, 63, this.bar);
  };
  polymerRename.sink(renameFn);
  renameFn.call(/** @type {!FooBarElement} */ (document.createElement("foo-bar")));
}
`);
      });
    });

  });
});
